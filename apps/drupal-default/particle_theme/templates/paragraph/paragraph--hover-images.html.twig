{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{#
    A minimum of three twig files are necessary in using paragraphs with blocks. The block-specific twig file, the block-field-specific twig file, and the paragraph-specific twig file.
    In this file we add a class to execute functionality, add the appropriate markup, and get the raw value from the text and link fields.
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'utc-hover-image-effect'
  ]
%}
{% block paragraph %}
    {% block content %}
      {{ content.field_hover_image }}
      <figcaption class="absolute bottom-0 left-0 top-0 right-0 w-full h-full flex items-center cursor-pointer">
        <div class="border-l-4 border-utc-new-gold-500 pl-4 lg:pl-2 xl:pl-4 cursor-pointer">
          <h2 class="m-0 lg:mb-2 whitespace-nowrap font-bold capitalize text-utc-new-blue-500 leading-tight">{{ content.field_hover_title.0 }}</h2>
          <p class="m-0 mb-2 text-utc-new-blue-500 leading-tight">{{ content.field_hover_text.0 }}</p>
          <a href="{{ content.field_hover_link.0['#url'] }}" title="Go to page {{ content.field_hover_link.0['#url'] }}" >Learn More</a>
        </div>
      </figcaption>		
    {% endblock %}
{% endblock paragraph %}
